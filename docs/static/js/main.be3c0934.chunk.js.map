{"version":3,"sources":["components/08-useReducer/todoReducer.js","components/08-useReducer/TodoListItem.js","components/08-useReducer/TodoList.js","components/08-useReducer/TodoAdd.js","hooks/useForm.js","components/08-useReducer/TodoApp.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","index","handleCheckTodo","handleRemoveTodo","className","description","onChange","onClick","TodoList","todos","i","propTypes","PropTypes","array","func","TodoAdd","handleAddTodo","initialState","useState","values","setValues","target","name","value","useForm","handleInputChange","reset","onSubmit","e","preventDefault","trim","length","newTodo","Date","getTime","placeholder","autoComplete","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispatch","useEffect","setItem","stringify","todoId","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be3c0934.chunk.js","sourcesContent":["export const todoReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [...state, action.payload];\r\n        case 'remove':\r\n            return state.filter((todo) => todo.id !== action.payload);\r\n        case 'check':\r\n            return state.map((todo) =>\r\n                todo.id === action.payload\r\n                    ? { ...todo, done: !todo.done }\r\n                    : todo,\r\n            );\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const TodoListItem = ({\r\n    todo,\r\n    index,\r\n    handleCheckTodo,\r\n    handleRemoveTodo,\r\n}) => {\r\n    return (\r\n        <li className='todoItem list-group-item list-group-item-action animate__animated animate__fadeIn'>\r\n            <span className={`todoDesc ${todo.done && 'completed'}`}>\r\n                {index + 1}- {todo.description}\r\n            </span>\r\n            <div className='listControls'>\r\n                <input\r\n                    className='form-check-input'\r\n                    type='checkbox'\r\n                    onChange={() => handleCheckTodo(todo.id)}\r\n                />\r\n                <div\r\n                    className='trashIcon'\r\n                    onClick={() => handleRemoveTodo(todo.id)}\r\n                />\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nTodoListItem.propTypes = {\r\n    todo: PropTypes.object,\r\n    index: PropTypes.number.isRequired,\r\n    handleCheckTodo: PropTypes.func,\r\n    handleRemoveTodo: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TodoListItem } from './TodoListItem';\r\n\r\nexport const TodoList = ({ todos, handleCheckTodo, handleRemoveTodo }) => {\r\n    return (\r\n        <ul className='todoList list-group list-group-flush'>\r\n            {todos.map((todo, i) => (\r\n                <TodoListItem\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    index={i}\r\n                    handleCheckTodo={handleCheckTodo}\r\n                    handleRemoveTodo={handleRemoveTodo}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nTodoListItem.propTypes = {\r\n    todos: PropTypes.array,\r\n    handleCheckTodo: PropTypes.func,\r\n    handleRemoveTodo: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const TodoAdd = ({ handleAddTodo }) => {\r\n    const [{ description }, handleInputChange, reset] = useForm({\r\n        description: '',\r\n    });\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()     \r\n        if (description.trim().length < 1){\r\n            return\r\n        }\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            description: description,\r\n            done: false,\r\n        };\r\n        handleAddTodo(newTodo);\r\n        reset();\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <h4>Add a new task</h4>\r\n            <hr />\r\n            <form onSubmit={handleSubmit}>\r\n                <div className='d-grid gap-2'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='text'\r\n                        name='description'\r\n                        placeholder='Type your task here'\r\n                        autoComplete='off'\r\n                        onChange={handleInputChange}\r\n                        value={description}\r\n                    />\r\n                    <button\r\n                        className={`btn btn-primary btn-block ${\r\n                            description.trim().length < 1 && 'disabled'\r\n                        }`}\r\n                        type='submit'>\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","import { useState } from 'react';\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState)\r\n    }\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value,\r\n        });\r\n    };\r\n\r\n    return [values, handleInputChange, reset];\r\n};\r\n\r\n\r\n/* Usage:\r\n1- import \"useForm\".\r\n2- const[formValues, handleInputChange] = useForm({\r\n        (NAME OF INPUT): ''\r\n    }).\r\n    the destructuring can be useful instead of \"formValues\" use {KEY OF THE OBJECT}\r\n3- Add the (name='') to the input.\r\n4- Use the \"reset()\" to restore the initial value and clean up the input\r\n*/ \r\n","import React, { useEffect, useReducer } from 'react';\r\nimport { todoReducer } from './todoReducer';\r\nimport { TodoList } from './TodoList';\r\nimport { TodoAdd } from './TodoAdd';\r\nimport '../../styles/todo-app.css';\r\n\r\nconst init = () => {\r\n    return JSON.parse(localStorage.getItem('todos')) || [];\r\n};\r\n\r\nexport const TodoApp = () => {\r\n    const [todos, dispatch] = useReducer(todoReducer, [], init);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos]);\r\n    \r\n    const handleRemoveTodo = (todoId) => {\r\n        console.log(todoId + ' >> is removed!');\r\n        const actionRemove = {\r\n            type: 'remove',\r\n            payload: todoId,\r\n        };\r\n        dispatch(actionRemove);\r\n    };\r\n    \r\n    const handleCheckTodo = (todoId) => {\r\n        console.log(todoId);\r\n        const actionCheck = {\r\n            type: 'check',\r\n            payload: todoId,\r\n        };\r\n        dispatch(actionCheck);\r\n    };\r\n    \r\n        const handleAddTodo = (newTodo) => {\r\n            dispatch({\r\n                type: 'add',\r\n                payload: newTodo,\r\n            });\r\n        };\r\n    \r\n    return (\r\n        <div>\r\n            <h1>To-Do App</h1>\r\n            <hr />\r\n            <div className='row'>\r\n                <div className='col-7'>\r\n                    {todos.length > 0 ? (\r\n                        <TodoList\r\n                            todos={todos}\r\n                            handleCheckTodo={handleCheckTodo}\r\n                            handleRemoveTodo={handleRemoveTodo}\r\n                        />\r\n                    ) : (\r\n                        <p className='alert alert-info text-center'>\r\n                            There are no tasks in the list.\r\n                        </p>\r\n                    )}\r\n                </div>\r\n                <div className='col-5 '>\r\n                    <TodoAdd\r\n                    handleAddTodo={handleAddTodo}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TodoApp } from './components/08-useReducer/TodoApp';\n\n\nReactDOM.render(\n    <>\n        <TodoApp />\n    </>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}